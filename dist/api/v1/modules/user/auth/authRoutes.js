"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const authRepository_1 = require("./authRepository");
const authService_1 = require("./authService");
const authController_1 = require("./authController");
const authenticate_1 = require("../../../../../middewares.ts/authenticate");
const repository_1 = require("../../admin/nation/repository");
const regionRepository_1 = require("../../admin/region/regionRepository");
const localRepository_1 = require("../../admin/local/localRepository");
const chapterRepository_1 = require("../../admin/chapter/chapterRepository");
const authRouter = express_1.default.Router();
const nationRepository = new repository_1.NationRepository();
const regionRepository = new regionRepository_1.RegionRepository();
const localRepository = new localRepository_1.LocalRepository();
const chapterRepository = new chapterRepository_1.ChapterRepository();
const authRepository = new authRepository_1.AuthRepository();
const authService = new authService_1.AuthService(authRepository, nationRepository, regionRepository, localRepository, chapterRepository);
const controller = new authController_1.AuthController(authService);
// PWA 
authRouter.post("/register", (req, res, next) => controller.registration(req, res, next));
authRouter.post("/send-otp", (req, res, next) => controller.sendOtp(req, res, next));
authRouter.post("/verify-otp", (req, res, next) => controller.verifyOtp(req, res, next));
authRouter.post('/signin', (req, res, next) => controller.userLogin(req, res, next));
authRouter.patch('/password/reset', authenticate_1.authenticate, (req, res, next) => controller.resetPassword(req, res, next));
authRouter.post('/password/forget', (req, res, next) => controller.forgetPassword(req, res, next));
authRouter.put('/password/forget', (req, res, next) => controller.updateForgetPassword(req, res, next));
authRouter.get('/nations', (req, res, next) => controller.getAllNations(req, res, next));
authRouter.get('/regions', (req, res, next) => controller.getAllRegions(req, res, next));
authRouter.get('/locals', (req, res, next) => controller.getAllLocals(req, res, next));
authRouter.get('/chapters', (req, res, next) => controller.getAllChapters(req, res, next));
exports.default = authRouter;
