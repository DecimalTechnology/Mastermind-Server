"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const profileRepository_1 = require("./profileRepository");
const profileService_1 = require("./profileService");
const profileController_1 = require("./profileController");
const authenticate_1 = require("../../../../../middewares.ts/authenticate");
const upload_1 = __importDefault(require("../../../../../middewares.ts/upload"));
const chapterRepository_1 = require("../../admin/chapter/chapterRepository");
const profileRouter = express_1.default.Router();
const profileRepository = new profileRepository_1.ProfileRepository();
const chapterRepository = new chapterRepository_1.ChapterRepository();
const profileService = new profileService_1.ProfileService(profileRepository, chapterRepository);
const controller = new profileController_1.ProfileController(profileService);
profileRouter.put("/", authenticate_1.authenticate, (req, res, next) => controller.updateProfile(req, res, next));
profileRouter.get("/", authenticate_1.authenticate, (req, res, next) => controller.getProfile(req, res, next));
profileRouter.patch("/profile-picture", upload_1.default.any(), authenticate_1.authenticate, (req, res, next) => controller.updateProfilePicture(req, res, next));
profileRouter.post("/search", authenticate_1.authenticate, (req, res, next) => controller.searchProfile(req, res, next));
profileRouter.post("/connect", authenticate_1.authenticate, (req, res, next) => controller.connectUser(req, res, next));
profileRouter.patch("/connect/accept", authenticate_1.authenticate, (req, res, next) => controller.acceptConnection(req, res, next));
profileRouter.patch("/connect/remove", authenticate_1.authenticate, (req, res, next) => controller.removeConnection(req, res, next));
profileRouter.patch("/connect/cancel", authenticate_1.authenticate, (req, res, next) => controller.cancelConnection(req, res, next));
profileRouter.get("/connect/all", authenticate_1.authenticate, (req, res, next) => controller.getConnections(req, res, next));
profileRouter.get("/connect/sent", authenticate_1.authenticate, (req, res, next) => controller.getSendRequests(req, res, next));
profileRouter.get("/connect/received", authenticate_1.authenticate, (req, res, next) => controller.getReceiveRequests(req, res, next));
profileRouter.get("/connect/connections", authenticate_1.authenticate, (req, res, next) => controller.getAllConnections(req, res, next));
profileRouter.get("/:id", authenticate_1.authenticate, (req, res, next) => controller.getProfileById(req, res, next));
exports.default = profileRouter;
